window.gLocalAssetContainer["node_modules/cowlick-engine/lib/models/GameState.js"] = function(g) { !function(e,t,r,a,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=t("cowlick-core"),s=t("./AlreadyReadManager"),o=function(){function e(e){this.data=e.data,this.currentVariables=e.variables,this.sceneStartVariables=this.currentVariables.current,this.max=e.max,this.alreadyReadManager=new s.AlreadyReadManager(this.currentVariables.builtin.alreadyRead),this.scenario=e.scenario}return Object.defineProperty(e.prototype,"variables",{get:function(){return this.currentVariables},enumerable:!0,configurable:!0}),e.prototype.exists=function(e){return"undefined"!=typeof this.data[e]},e.prototype.save=function(e){if(e.index>this.max||e.index<0)throw new n.GameError("storage out of range",e);var t=this.scenario.createSaveData(this.sceneStartVariables,e.description);if(e.force)return this.data[e.index]=t,t;if(this.exists(e.index))throw new n.GameError("save data already exists",e);return this.data[e.index]=t,t},e.prototype.load=function(e){var t=this.data[e];return t&&(this.currentVariables.current=t.variables,this.sceneStartVariables=t.variables,this.scenario.backlog=t.logs),t},e.prototype.getValue=function(e){return this.getVariables(e)[e.name]},e.prototype.getStringValue=function(e){var t=this.getValue(e);return t?String(t):void 0},e.prototype.setValue=function(e,t){this.getVariables(e)[e.name]=t},e.prototype.collectAssetIds=function(e){for(var t=[],r=0,a=this.data;r<a.length;r++){var i=a[r];i&&t.push.apply(t,this.scenario.findScene(e,i).assetIds)}return t},e.prototype.isAlreadyRead=function(e,t){return this.alreadyReadManager.isAlreadyRead(e,t)},e.prototype.markAlreadyRead=function(e,t){this.alreadyReadManager.mark(e,t)},e.prototype.copyGameVariables=function(){this.sceneStartVariables=this.currentVariables.current},e.prototype.getVariables=function(e){if(e.type===n.VariableType.system)return this.currentVariables.system;if(e.type===n.VariableType.builtin)return this.currentVariables.builtin;if(e.type===n.VariableType.current)return this.currentVariables.current;throw new n.GameError("invalid variable type",e)},e.prototype.createSnapshot=function(){return this.scenario.createSaveData(this.sceneStartVariables)},e}();e.GameState=o}(g.module.exports,g.module.require,g.module,g.filename,g.dirname);}